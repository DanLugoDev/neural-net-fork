export declare type FillFn = () => number;
export declare const zero: FillFn;
export declare type Vec = number[];
export declare type Mat = Vec[];
export declare type Tensor = Vec | Mat;
export declare const newVec: (length: number, fillFn?: FillFn | undefined) => number[];
export declare const Vectorize: (len: number, idx: number, value: number) => number[];
export declare const isVec: (tensor: Tensor) => tensor is number[];
export declare const isMat: (tensor: Tensor) => tensor is number[][];
export declare const newMat: (rows: number, cols: number, fillFn?: FillFn | undefined) => number[][];
export declare const vecPlusVec: (v: number[], w: number[]) => number[];
export declare const vecMinusVec: (v: number[], w: number[]) => number[];
export declare const scalarTimesVec: (s: number, v: number[]) => number[];
export declare const hadamard: (v: number[], w: number[]) => number[];
export declare const schur: (v: number[], w: number[]) => number[];
export declare const dot: (v: number[], w: number[]) => number;
export declare const vecTimesMat: (v: number[], m: number[][]) => number[];
export declare const matPlusMat: (m: number[][], n: number[][]) => number[][];
export declare const matMinusMat: (m: number[][], n: number[][]) => number[][];
export declare const scalarTimesMat: (s: number, m: number[][]) => number[][];
export declare const matTimesMat: (m: number[][], n: number[][]) => number[][];
